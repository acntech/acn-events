// Generated by CoffeeScript 1.6.3
(function() {
  var Registration, actions, appdir, authentication, basedir, config, configdir, modeldir, mongoose, registrationModel, request;

  basedir = "../../../../";

  appdir = basedir + "app/";

  modeldir = appdir + "models/";

  configdir = basedir + "config/";

  registrationModel = require(modeldir + 'registration');

  mongoose = require('mongoose');

  config = require(configdir + 'config');

  Registration = mongoose.model('Registration');

  actions = require(configdir + 'actions');

  request = require("request");

  authentication = {
    auth: {
      user: config.autUser,
      pass: config.autPass,
      sendImmediately: false
    }
  };

  describe("registration", function() {
    it('should respond with hello world', function(done) {
      return request.get(config.host + "/api/helloworld", authentication, function(error, response, body) {
        var link1, link2;
        expect(body).toEqual("Hello World");
        link1 = "<" + config.host + "/api/event/registrations/helloworld>; rel=\"self\"";
        link2 = "<" + config.host + "/api/event/registrations/helloworld2>; rel=\"next\"";
        expect(response.headers.link).toEqual(link1 + ", " + link2);
        return done();
      });
    });
    it('should retreive error when required fields are not filled out', function(done) {
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route
      }, function(error, response, body) {
        expect(response.statusCode).toEqual(400);
        return done();
      });
    });
    it('should register the user given all required fields are filled out and email is not registered', function(done) {
      var newRegistration, query;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar1@slomic.no",
          phone: 99589889
        }
      };
      request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        expect(response.statusCode).toEqual(200);
        expect(body.state).toEqual(actions.register.endState);
        expect(response.headers.link).not.toBe(null);
        return done();
      });
      query = Registration.remove();
      return query.exec();
    });
    it('should not register the user given already registered', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar2@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        console.log("Finished registering");
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.register.httpVerb,
          uri: config.host + actions.register.route,
          json: newRegistration
        }, function(error, response, body) {
          console.log("Finished registering");
          expect(response.statusCode).toEqual(400);
          return done();
        });
      });
    });
    it('should unregister the user given user is registered', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar3@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        console.log("Finished registering");
        newRegistration = body;
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.unregister.httpVerb,
          uri: config.host + actions.unregister.resolveRoute(newRegistration._id),
          json: newRegistration
        }, function(error, response, body) {
          console.log("Finished unregistering");
          expect(response.statusCode).toEqual(200);
          expect(body.state).toEqual(actions.unregister.endState);
          return done();
        });
      });
    });
    it('should confirm the user given user is registered', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar4@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        newRegistration = body;
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.confirm.httpVerb,
          uri: config.host + actions.confirm.resolveRoute(newRegistration._id),
          json: newRegistration
        }, function(error, response, body) {
          expect(response.statusCode).toEqual(200);
          expect(body.state).toEqual(actions.confirm.endState);
          return done();
        });
      });
    });
    it('should unregister the user given user is confirmed', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar5@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        newRegistration = body;
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.confirm.httpVerb,
          uri: config.host + actions.confirm.resolveRoute(newRegistration._id),
          json: newRegistration
        }, function(error, response, body) {
          expect(response.statusCode).toEqual(200);
          expect(body.state).toEqual(actions.confirm.endState);
          return request({
            method: actions.unregister.httpVerb,
            uri: config.host + actions.unregister.resolveRoute(newRegistration._id),
            json: newRegistration
          }, function(error, response, body) {
            expect(response.statusCode).toEqual(200);
            expect(body.state).toEqual(actions.unregister.endState);
            return done();
          });
        });
      });
    });
    it('should checkIn the user given user is confirmed', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar6@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        newRegistration = body;
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.confirm.httpVerb,
          auth: {
            user: config.autUser,
            pass: config.autPass,
            sendImmediately: false
          },
          uri: config.host + actions.confirm.resolveRoute(newRegistration._id),
          json: newRegistration
        }, function(error, response, body) {
          expect(response.statusCode).toEqual(200);
          expect(body.state).toEqual(actions.confirm.endState);
          return request({
            method: actions.checkIn.httpVerb,
            auth: {
              user: config.autUser,
              pass: config.autPass,
              sendImmediately: false
            },
            uri: config.host + actions.checkIn.resolveRoute(newRegistration._id),
            json: newRegistration
          }, function(error, response, body) {
            expect(response.statusCode).toEqual(200);
            expect(body.state).toEqual(actions.checkIn.endState);
            return done();
          });
        });
      });
    });
    return it('should fail when check in given user is registered', function(done) {
      var newRegistration;
      newRegistration = {
        person: {
          name: "Ismar Slomic",
          email: "ismar7@slomic.no",
          phone: 99589889
        }
      };
      return request({
        method: actions.register.httpVerb,
        uri: config.host + actions.register.route,
        json: newRegistration
      }, function(error, response, body) {
        newRegistration = body;
        expect(response.statusCode).toEqual(200);
        return request({
          method: actions.checkIn.httpVerb,
          auth: {
            user: config.autUser,
            pass: config.autPass,
            sendImmediately: false
          },
          uri: config.host + actions.checkIn.resolveRoute(newRegistration._id),
          json: newRegistration
        }, function(error, response, body) {
          expect(response.statusCode).toEqual(400);
          mongoose.connect(config.db);
          Registration.remove(function(error) {
            if (error) {
              return console.log("Error deleting docs in DB: " + erorr);
            }
          });
          console.log("Cleaned test data in db");
          mongoose.disconnect();
          return done();
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=registrationSpec.map
*/
