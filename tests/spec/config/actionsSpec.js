// Generated by CoffeeScript 1.6.3
(function() {
  var actions, basedir, configDir;

  basedir = "../../../";

  configDir = basedir + "config/";

  actions = require(configDir + "actions.js");

  describe("When calling register action", function() {
    var registerAct;
    registerAct = actions.register;
    it('valid next actions are only: unregister and confirm', function() {
      expect(registerAct.nextActions.length).toBe(2);
      expect(registerAct.nextActions[0].name).toBe(actions.unregister.name);
      expect(registerAct.nextActions[1].name).toBe(actions.confirm.name);
      expect(registerAct.isValidNextAction(actions.confirm.name)).toBe(true);
      expect(registerAct.isValidNextAction(actions.unregister.name)).toBe(true);
      expect(registerAct.isValidNextAction(actions.checkIn.name)).toBe(false);
      return expect(registerAct.isValidNextAction(actions.register.name)).toBe(false);
    });
    return it("three links should be valid for self, unregister and confirm", function() {
      expect(registerAct.links().self).not.toBe(void 0);
      expect(registerAct.links().unregister).not.toBe(void 0);
      expect(registerAct.links().confirm).not.toBe(void 0);
      return expect(registerAct.links().checkIn).toBe(void 0);
    });
  });

  describe("When calling confirm action", function() {
    var confirmAct;
    confirmAct = actions.confirm;
    return it('valid next actions are only: unregister and checkin', function() {
      expect(confirmAct.nextActions.length).toBe(2);
      expect(confirmAct.nextActions[0].name).toBe(actions.unregister.name);
      expect(confirmAct.nextActions[1].name).toBe(actions.checkIn.name);
      expect(confirmAct.isValidNextAction(actions.checkIn.name)).toBe(true);
      expect(confirmAct.isValidNextAction(actions.unregister.name)).toBe(true);
      expect(confirmAct.isValidNextAction(actions.register.name)).toBe(false);
      return expect(confirmAct.isValidNextAction(actions.confirm.name)).toBe(false);
    });
  });

  describe("When calling unregister action", function() {
    var unregisterAct;
    unregisterAct = actions.unregister;
    return it('there are no next actions', function() {
      expect(unregisterAct.nextActions.length).toBe(0);
      expect(unregisterAct.isValidNextAction(actions.checkIn.name)).toBe(false);
      expect(unregisterAct.isValidNextAction(actions.unregister.name)).toBe(false);
      expect(unregisterAct.isValidNextAction(actions.register.name)).toBe(false);
      return expect(unregisterAct.isValidNextAction(actions.confirm.name)).toBe(false);
    });
  });

  describe("When calling checkIn action", function() {
    var checkInAct;
    checkInAct = actions.unregister;
    return it('there are no next actions', function() {
      expect(checkInAct.nextActions.length).toBe(0);
      expect(checkInAct.isValidNextAction(actions.checkIn.name)).toBe(false);
      expect(checkInAct.isValidNextAction(actions.unregister.name)).toBe(false);
      expect(checkInAct.isValidNextAction(actions.register.name)).toBe(false);
      return expect(checkInAct.isValidNextAction(actions.confirm.name)).toBe(false);
    });
  });

  describe("Given register state", function() {
    it('it should be possible to unregister', function() {
      return expect(actions.isValidNextAction(actions.register.endState, actions.unregister.name)).toBe(true);
    });
    return it('it should be possible to confirm', function() {
      return expect(actions.isValidNextAction(actions.register.endState, actions.confirm.name)).toBe(true);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=actionsSpec.map
*/
